/* ========= Base / Defaults ========= */
*,
*::before,
*::after { box-sizing: border-box; }

:root{
  /* layout */
  --container-w: 90%;
  --container-max: 1200px;
  --container-h: 100%;

  /* cards */
  --card-w: 50%;
  --card-h: 4rem;          /* fixed height for consistent layout (no conflicting flex+max-height) */
  --card-radius: 12px;
  --card-gap-col: 0.8rem;
  --card-gap-row: 1%;

  /* colors */
  --text-dark: #111;

  /* effects */
  --drag-shadow: 0 2px 8px rgba(0,0,0,.12);
}

/* ========= Main container ========= */
.game_container {
  font-family: "Monaco", Monospace, sans-serif;
  display: flex;
  justify-content: space-between;
  align-items: stretch;
  width: var(--container-w);
  max-width: var(--container-max);
  height: var(--container-h);         /* cards will stretch to container height distribution-wise */
  gap: var(--card-gap-row);
  background-image: linear-gradient(43deg, #495dbd 0%, #C850C0 46%, #FFCC70 100%);
  padding: 1% 0 3%;
}

/* ========= Columns ========= */
.left,
.right {
  flex: 1 1 0;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;       /* evenly distribute vertically */
  align-items: center;
  gap: var(--card-gap-col);
}

/* ========= Cards (shared) ========= */
.dragElement,
.dropZone {
  width: var(--card-w);
  height: var(--card-h);               /* fixed, avoids layout thrash while dragging */
  flex: 0 0 var(--card-h);             /* prevent vertical stretching conflicts */
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--card-radius);
  text-align: center;
  transition: transform .2s ease, box-shadow .2s ease, background-color .2s ease;
  /* Touch + selection hygiene */
  touch-action: none;
  user-select: none;
}

/* ========= Draggable cards ========= */
.dragElement {
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(4px);
}

.dragElement h3 {
  margin: 0;
  color: var(--text-dark);
}

/* Performance: lighten visuals during drag */
.dragElement.beingDragged {
  /* Disable heavy filters while moving to keep 60fps */
  backdrop-filter: none !important;
  -webkit-backdrop-filter: none !important;
  box-shadow: var(--drag-shadow) !important;
  cursor: grabbing;
  /* Create a compositor layer only while dragging */
  will-change: transform;
  transform: translateZ(0);
  z-index: 10;
}

/* ========= Drop zones ========= */
.dropZone {
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(6px);
  display: flex;                    /* already true in your code */
  align-items: center;
  justify-content: center;
  overflow: hidden;                 /* avoid corner bleed */
}

/* Reduce heavy visuals on hover state */
.dropZone.hoverOver {
  box-shadow: none !important;
}

/* Optional success styling (if you add a 'filled' class in JS) */
.dropZone.filled {
  border: 2px solid #228B22;
  overflow: hidden; /* avoids corner bleed when a child fills the zone */
}


.dropZone > .dragElement {
  flex: 1 1 auto !important;        /* override flex-basis: 5rem */
  width: 100% !important;
  height: 100% !important;
  border-radius: inherit;           /* match zoneâ€™s rounded corners */
  transform: none !important;       /* clear any translate from dragging */
}


/* ========= Color backgrounds ========= */
.noir   { background-color: #000; }
.blanc  { background-color: #fff; }
.rouge  { background-color: red; }
.vert   { background-color: green; }
.jaune  { background-color: yellow; }
.orange { background-color: rgb(255, 123, 0); }
.rose   { background-color: rgb(255, 52, 255); }
.gris   { background-color: rgb(187, 187, 187); }
.bleu   { background-color: blue; }
.violet { background-color: rgb(153, 0, 255); }


.speak-btn {
  background: none;
  border: none;
  font-size: 1.1rem;
  margin-left: .5rem;
  cursor: pointer;
}

.speak-btn:hover { transform: scale(1.2); }
.speak-btn:active { transform: scale(0.95); }

/* ========= Reduced motion ========= */
@media (prefers-reduced-motion: reduce) {
  .dragElement,
  .dropZone {
    transition: none;
  }
}

/* ========= Small screens ========= */
@media (max-width: 800px) {
  :root{
    --card-w: 70%;
    --card-h: 4.25rem;
  }

  .game_container {
    height: 100%;             /* let content size naturally on mobile */
  }

  .left,
  .right {
    gap: 0.5rem;
  }
}
